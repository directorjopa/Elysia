from aiogram import types
from aiogram.fsm.context import FSMContext
from aiogram.types import ReplyKeyboardRemove  # –î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–π –∏–º–ø–æ—Ä—Ç
from database import get_user_data, add_user
from keyboards import get_main_menu, end_session_keyboard, get_pomodoro_menu, get_back_to_main_menu
from states import UserState
from services import ask_openrouter
from config import PSYCHOLOGIST_PROMPT
import asyncio
import logging

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def send_welcome(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    user_data = get_user_data(user_id)
    if not user_data:
        await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏. –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")
        await state.set_state(UserState.waiting_for_name)
    else:
        await message.answer(f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {user_data[1]}! –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_menu())
        await state.set_state(UserState.in_session)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /menu
async def send_menu(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_menu())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def process_name(message: types.Message, state: FSMContext):
    user_name = message.text
    user_id = message.from_user.id
    add_user(user_id, user_name)
    await state.update_data(user_name=user_name)
    await message.answer(f"–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {user_name}! –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_menu())
    await state.set_state(UserState.in_session)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "AI –ø—Å–∏—Ö–æ–ª–æ–≥"
async def start_psychologist(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "üß† **AI –ø—Å–∏—Ö–æ–ª–æ–≥**\n\n"
        "–¢—ã –º–æ–∂–µ—à—å –æ–±—â–∞—Ç—å—Å—è —Å AI –ø—Å–∏—Ö–æ–ª–æ–≥–æ–º. –û–Ω –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ —Ç–≤–æ–∏—Ö –º—ã—Å–ª—è—Ö –∏ —á—É–≤—Å—Ç–≤–∞—Ö.\n\n"
        "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ –æ–Ω –æ—Ç–≤–µ—Ç–∏—Ç. –ß—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å —Å–µ–∞–Ω—Å, –Ω–∞–ø–∏—à–∏ '–ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–µ–∞–Ω—Å'.",
        reply_markup=None
    )
    await callback.answer()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
    await state.update_data(messages=[{"role": "system", "content": PSYCHOLOGIST_PROMPT}])
    await callback.message.answer("–ù–∞—á–Ω–µ–º —Å–µ–∞–Ω—Å. –†–∞—Å—Å–∫–∞–∂–∏, —á—Ç–æ —É —Ç–µ–±—è –Ω–∞ –¥—É—à–µ.", reply_markup=end_session_keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–†–µ—Ñ–ª–µ–∫—Å–∏—è"
async def handle_reflection(callback: types.CallbackQuery):
    await callback.message.edit_text(
        "üìù **–†–µ—Ñ–ª–µ–∫—Å–∏—è**\n\n"
        "–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –°–ª–µ–¥–∏ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏!",
        reply_markup=get_back_to_main_menu()
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ñ—É—Ä–Ω–∞–ª"
async def handle_journal(callback: types.CallbackQuery):
    await callback.message.edit_text(
        "üìî **–ñ—É—Ä–Ω–∞–ª**\n\n"
        "–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –°–ª–µ–¥–∏ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏!",
        reply_markup=get_back_to_main_menu()
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ—Ñ–∏–ª—å"
async def handle_profile(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    user_data = get_user_data(user_id)
    if user_data:
        await callback.message.edit_text(
            f"üë§ **–ü—Ä–æ—Ñ–∏–ª—å**\n\n"
            f"–ò–º—è: {user_data[1]}\n"
            f"–î–Ω–µ–π –≤ –±–æ—Ç–µ: {user_data[2]}\n"
            f"–ü—Ä–µ—Ñ—Ä–æ–Ω—Ç–∞–ª—å–Ω–∞—è –∫–æ—Ä–∞: {user_data[3]}\n"
            f"–ì–∏–ø–ø–æ–∫–∞–º–ø: {user_data[4]}\n"
            f"–ú–∏–Ω–¥–∞–ª–µ–≤–∏–¥–Ω–æ–µ —Ç–µ–ª–æ: {user_data[5]}",
            reply_markup=get_back_to_main_menu()
        )
    else:
        await callback.message.edit_text("–í—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ù–∞–ø–∏—à–∏—Ç–µ /start.", reply_markup=get_back_to_main_menu())
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "Pomodoro Tracker"
async def start_pomodoro_tracker(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "üçÖ **Pomodoro Tracker**\n\n"
        "–≠—Ç–æ—Ç —Ç–∞–π–º–µ—Ä –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ —Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á–∏—Ç—å—Å—è –Ω–∞ –∑–∞–¥–∞—á–∞—Ö. "
        "–†–∞–±–æ—Ç–∞–π 25 –º–∏–Ω—É—Ç, –∑–∞—Ç–µ–º –æ—Ç–¥—ã—Ö–∞–π 5 –º–∏–Ω—É—Ç. –¶–∏–∫–ª –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è, –ø–æ–∫–∞ —Ç—ã –Ω–µ —Ä–µ—à–∏—à—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è.",
        reply_markup=get_pomodoro_menu()
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–∞–π–º–µ—Ä"
async def start_pomodoro_timer(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "–¢–∞–π–º–µ—Ä –∑–∞–ø—É—â–µ–Ω! üïí 25 –º–∏–Ω—É—Ç —Ñ–æ–∫—É—Å–∞.",
        reply_markup=get_pomodoro_menu(is_timer_running=True)
    )
    await callback.answer()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ü–∏–∫–ª Pomodoro
    await pomodoro_cycle(callback.message, state)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–∞–π–º–µ—Ä"
async def stop_pomodoro_timer(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "üçÖ **Pomodoro Tracker**\n\n"
        "–≠—Ç–æ—Ç —Ç–∞–π–º–µ—Ä –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ —Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á–∏—Ç—å—Å—è –Ω–∞ –∑–∞–¥–∞—á–∞—Ö. "
        "–†–∞–±–æ—Ç–∞–π 25 –º–∏–Ω—É—Ç, –∑–∞—Ç–µ–º –æ—Ç–¥—ã—Ö–∞–π 5 –º–∏–Ω—É—Ç. –¶–∏–∫–ª –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è, –ø–æ–∫–∞ —Ç—ã –Ω–µ —Ä–µ—à–∏—à—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è.",
        reply_markup=get_pomodoro_menu()
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
async def return_to_main_menu(callback: types.CallbackQuery):
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_menu())
    await callback.answer()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ü–∏–∫–ª–∞ Pomodoro
async def pomodoro_cycle(message: types.Message, state: FSMContext):
    while True:
        # 25 –º–∏–Ω—É—Ç —Ñ–æ–∫—É—Å–∞
        await asyncio.sleep(25 * 60)  # 25 –º–∏–Ω—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        await message.answer("üïí 25 –º–∏–Ω—É—Ç –ø—Ä–æ—à–ª–∏! –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è 5-–º–∏–Ω—É—Ç–Ω—ã–π –ø–µ—Ä–µ—Ä—ã–≤.")
        
        # 5 –º–∏–Ω—É—Ç –ø–µ—Ä–µ—Ä—ã–≤–∞
        await asyncio.sleep(5 * 60)  # 5 –º–∏–Ω—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        await message.answer("üïí –ü–µ—Ä–µ—Ä—ã–≤ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è. –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –Ω–æ–≤—ã–π —Ü–∏–∫–ª —Ñ–æ–∫—É—Å–∞ (25 –º–∏–Ω—É—Ç).")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–µ–∞–Ω—Å–∞ —Å –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é
async def end_psychologist_session(message: types.Message, state: FSMContext):
    await message.answer(
        "–°–µ–∞–Ω—Å –∑–∞–≤–µ—Ä—à—ë–Ω.",
        reply_markup=ReplyKeyboardRemove(),  # –ò—Å–ø–æ–ª—å–∑—É–µ–º ReplyKeyboardRemove
    )
    await message.answer("–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_menu())
    await state.update_data(messages=[])

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞)
async def handle_message(message: types.Message, state: FSMContext):
    if message.text.lower() == '–∑–∞–≤–µ—Ä—à–∏—Ç—å —Å–µ–∞–Ω—Å':
        await end_psychologist_session(message, state)
    else:
        user_data = await state.get_data()
        messages = user_data.get("messages", [])
        messages.append({"role": "user", "content": message.text})
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞
        generating_msg = await message.answer("‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç–≤–µ—Ç...", reply_markup=end_session_keyboard)
        
        try:
            response = ask_openrouter(messages)
            messages.append({"role": "assistant", "content": response})
            await state.update_data(messages=messages)
            
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            await generating_msg.delete()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–∏
            if len(response) > 4096:
                for x in range(0, len(response), 4096):
                    await message.answer(response[x:x+4096], reply_markup=end_session_keyboard)
            else:
                await message.answer(response, reply_markup=end_session_keyboard)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: {e}")
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏, –¥–∞–∂–µ –µ—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞
            await generating_msg.delete()
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", reply_markup=end_session_keyboard)
